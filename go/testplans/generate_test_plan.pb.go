// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testplans/generate_test_plan.proto

package testplans

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FilePath struct {
	FilePath             string   `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilePath) Reset()         { *m = FilePath{} }
func (m *FilePath) String() string { return proto.CompactTextString(m) }
func (*FilePath) ProtoMessage()    {}
func (*FilePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{0}
}

func (m *FilePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilePath.Unmarshal(m, b)
}
func (m *FilePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilePath.Marshal(b, m, deterministic)
}
func (m *FilePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePath.Merge(m, src)
}
func (m *FilePath) XXX_Size() int {
	return xxx_messageInfo_FilePath.Size(m)
}
func (m *FilePath) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePath.DiscardUnknown(m)
}

var xxx_messageInfo_FilePath proto.InternalMessageInfo

func (m *FilePath) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type GenerateTestPlanRequest struct {
	// Path on disk to source_tree_test_config.cfg, which lives in chromite.
	SourceTreeConfigPath string `protobuf:"bytes,1,opt,name=source_tree_config_path,json=sourceTreeConfigPath,proto3" json:"source_tree_config_path,omitempty"`
	// Path on disk to target_test_requirements.cfg, which lives in chromite.
	TargetTestRequirementsPath string `protobuf:"bytes,2,opt,name=target_test_requirements_path,json=targetTestRequirementsPath,proto3" json:"target_test_requirements_path,omitempty"`
	// Path on disk to the buildbucket Build protos in protobuf JSON format.
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/master/buildbucket/proto/build.proto
	BuildbucketBuildPath []*FilePath `protobuf:"bytes,3,rep,name=buildbucket_build_path,json=buildbucketBuildPath,proto3" json:"buildbucket_build_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenerateTestPlanRequest) Reset()         { *m = GenerateTestPlanRequest{} }
func (m *GenerateTestPlanRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateTestPlanRequest) ProtoMessage()    {}
func (*GenerateTestPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{1}
}

func (m *GenerateTestPlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateTestPlanRequest.Unmarshal(m, b)
}
func (m *GenerateTestPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateTestPlanRequest.Marshal(b, m, deterministic)
}
func (m *GenerateTestPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateTestPlanRequest.Merge(m, src)
}
func (m *GenerateTestPlanRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateTestPlanRequest.Size(m)
}
func (m *GenerateTestPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateTestPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateTestPlanRequest proto.InternalMessageInfo

func (m *GenerateTestPlanRequest) GetSourceTreeConfigPath() string {
	if m != nil {
		return m.SourceTreeConfigPath
	}
	return ""
}

func (m *GenerateTestPlanRequest) GetTargetTestRequirementsPath() string {
	if m != nil {
		return m.TargetTestRequirementsPath
	}
	return ""
}

func (m *GenerateTestPlanRequest) GetBuildbucketBuildPath() []*FilePath {
	if m != nil {
		return m.BuildbucketBuildPath
	}
	return nil
}

// The final test plan.
type GenerateTestPlanResponse struct {
	TestUnit             []*TestUnit `protobuf:"bytes,1,rep,name=test_unit,json=testUnit,proto3" json:"test_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenerateTestPlanResponse) Reset()         { *m = GenerateTestPlanResponse{} }
func (m *GenerateTestPlanResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateTestPlanResponse) ProtoMessage()    {}
func (*GenerateTestPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{2}
}

func (m *GenerateTestPlanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateTestPlanResponse.Unmarshal(m, b)
}
func (m *GenerateTestPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateTestPlanResponse.Marshal(b, m, deterministic)
}
func (m *GenerateTestPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateTestPlanResponse.Merge(m, src)
}
func (m *GenerateTestPlanResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateTestPlanResponse.Size(m)
}
func (m *GenerateTestPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateTestPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateTestPlanResponse proto.InternalMessageInfo

func (m *GenerateTestPlanResponse) GetTestUnit() []*TestUnit {
	if m != nil {
		return m.TestUnit
	}
	return nil
}

// A Chromium build image, such as "kevin".
type Image struct {
	// The build image's name.
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{3}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

// The files that should be tested in a test plan.
type BuildPayload struct {
	// We expect to use either version or images, but not both.
	// We'll drop the unnecessary one once we've sorted out details
	// with the Skylab team.
	Version string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Image   []*Image `protobuf:"bytes,2,rep,name=image,proto3" json:"image,omitempty"`
	// The location in Google Storage of the artifacts for this build.
	// e.g. gs://chromeos-image-archive/eve-paladin/R73-11588.0.0-rc4
	ArtifactPath         string   `protobuf:"bytes,3,opt,name=artifact_path,json=artifactPath,proto3" json:"artifact_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildPayload) Reset()         { *m = BuildPayload{} }
func (m *BuildPayload) String() string { return proto.CompactTextString(m) }
func (*BuildPayload) ProtoMessage()    {}
func (*BuildPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{4}
}

func (m *BuildPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildPayload.Unmarshal(m, b)
}
func (m *BuildPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildPayload.Marshal(b, m, deterministic)
}
func (m *BuildPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildPayload.Merge(m, src)
}
func (m *BuildPayload) XXX_Size() int {
	return xxx_messageInfo_BuildPayload.Size(m)
}
func (m *BuildPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildPayload.DiscardUnknown(m)
}

var xxx_messageInfo_BuildPayload proto.InternalMessageInfo

func (m *BuildPayload) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BuildPayload) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *BuildPayload) GetArtifactPath() string {
	if m != nil {
		return m.ArtifactPath
	}
	return ""
}

// Hardware or VM requirements for running a test plan.
type SchedulingRequirements struct {
	// Types that are valid to be assigned to TargetType:
	//	*SchedulingRequirements_BuildTarget
	TargetType           isSchedulingRequirements_TargetType `protobuf_oneof:"target_type"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *SchedulingRequirements) Reset()         { *m = SchedulingRequirements{} }
func (m *SchedulingRequirements) String() string { return proto.CompactTextString(m) }
func (*SchedulingRequirements) ProtoMessage()    {}
func (*SchedulingRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{5}
}

func (m *SchedulingRequirements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingRequirements.Unmarshal(m, b)
}
func (m *SchedulingRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingRequirements.Marshal(b, m, deterministic)
}
func (m *SchedulingRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingRequirements.Merge(m, src)
}
func (m *SchedulingRequirements) XXX_Size() int {
	return xxx_messageInfo_SchedulingRequirements.Size(m)
}
func (m *SchedulingRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingRequirements proto.InternalMessageInfo

type isSchedulingRequirements_TargetType interface {
	isSchedulingRequirements_TargetType()
}

type SchedulingRequirements_BuildTarget struct {
	BuildTarget string `protobuf:"bytes,2,opt,name=build_target,json=buildTarget,proto3,oneof"`
}

func (*SchedulingRequirements_BuildTarget) isSchedulingRequirements_TargetType() {}

func (m *SchedulingRequirements) GetTargetType() isSchedulingRequirements_TargetType {
	if m != nil {
		return m.TargetType
	}
	return nil
}

func (m *SchedulingRequirements) GetBuildTarget() string {
	if x, ok := m.GetTargetType().(*SchedulingRequirements_BuildTarget); ok {
		return x.BuildTarget
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchedulingRequirements) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchedulingRequirements_BuildTarget)(nil),
	}
}

// Metadata for executing one test configuration for one target type.
type TestUnit struct {
	// Types that are valid to be assigned to TestCfg:
	//	*TestUnit_GceTestCfg
	//	*TestUnit_HwTestCfg
	//	*TestUnit_MoblabVmTestCfg
	//	*TestUnit_TastVmTestCfg
	//	*TestUnit_VmTestCfg
	TestCfg isTestUnit_TestCfg `protobuf_oneof:"TestCfg"`
	// The scheduling requirements for this test plan.
	SchedulingRequirements *SchedulingRequirements `protobuf:"bytes,6,opt,name=scheduling_requirements,json=schedulingRequirements,proto3" json:"scheduling_requirements,omitempty"`
	// The build files provided to run this test plan.
	BuildPayload         *BuildPayload `protobuf:"bytes,7,opt,name=build_payload,json=buildPayload,proto3" json:"build_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TestUnit) Reset()         { *m = TestUnit{} }
func (m *TestUnit) String() string { return proto.CompactTextString(m) }
func (*TestUnit) ProtoMessage()    {}
func (*TestUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8083f85c67203f6, []int{6}
}

func (m *TestUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestUnit.Unmarshal(m, b)
}
func (m *TestUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestUnit.Marshal(b, m, deterministic)
}
func (m *TestUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestUnit.Merge(m, src)
}
func (m *TestUnit) XXX_Size() int {
	return xxx_messageInfo_TestUnit.Size(m)
}
func (m *TestUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_TestUnit.DiscardUnknown(m)
}

var xxx_messageInfo_TestUnit proto.InternalMessageInfo

type isTestUnit_TestCfg interface {
	isTestUnit_TestCfg()
}

type TestUnit_GceTestCfg struct {
	GceTestCfg *GceTestCfg `protobuf:"bytes,1,opt,name=gce_test_cfg,json=gceTestCfg,proto3,oneof"`
}

type TestUnit_HwTestCfg struct {
	HwTestCfg *HwTestCfg `protobuf:"bytes,2,opt,name=hw_test_cfg,json=hwTestCfg,proto3,oneof"`
}

type TestUnit_MoblabVmTestCfg struct {
	MoblabVmTestCfg *MoblabVmTestCfg `protobuf:"bytes,3,opt,name=moblab_vm_test_cfg,json=moblabVmTestCfg,proto3,oneof"`
}

type TestUnit_TastVmTestCfg struct {
	TastVmTestCfg *TastVmTestCfg `protobuf:"bytes,4,opt,name=tast_vm_test_cfg,json=tastVmTestCfg,proto3,oneof"`
}

type TestUnit_VmTestCfg struct {
	VmTestCfg *VmTestCfg `protobuf:"bytes,5,opt,name=vm_test_cfg,json=vmTestCfg,proto3,oneof"`
}

func (*TestUnit_GceTestCfg) isTestUnit_TestCfg() {}

func (*TestUnit_HwTestCfg) isTestUnit_TestCfg() {}

func (*TestUnit_MoblabVmTestCfg) isTestUnit_TestCfg() {}

func (*TestUnit_TastVmTestCfg) isTestUnit_TestCfg() {}

func (*TestUnit_VmTestCfg) isTestUnit_TestCfg() {}

func (m *TestUnit) GetTestCfg() isTestUnit_TestCfg {
	if m != nil {
		return m.TestCfg
	}
	return nil
}

func (m *TestUnit) GetGceTestCfg() *GceTestCfg {
	if x, ok := m.GetTestCfg().(*TestUnit_GceTestCfg); ok {
		return x.GceTestCfg
	}
	return nil
}

func (m *TestUnit) GetHwTestCfg() *HwTestCfg {
	if x, ok := m.GetTestCfg().(*TestUnit_HwTestCfg); ok {
		return x.HwTestCfg
	}
	return nil
}

func (m *TestUnit) GetMoblabVmTestCfg() *MoblabVmTestCfg {
	if x, ok := m.GetTestCfg().(*TestUnit_MoblabVmTestCfg); ok {
		return x.MoblabVmTestCfg
	}
	return nil
}

func (m *TestUnit) GetTastVmTestCfg() *TastVmTestCfg {
	if x, ok := m.GetTestCfg().(*TestUnit_TastVmTestCfg); ok {
		return x.TastVmTestCfg
	}
	return nil
}

func (m *TestUnit) GetVmTestCfg() *VmTestCfg {
	if x, ok := m.GetTestCfg().(*TestUnit_VmTestCfg); ok {
		return x.VmTestCfg
	}
	return nil
}

func (m *TestUnit) GetSchedulingRequirements() *SchedulingRequirements {
	if m != nil {
		return m.SchedulingRequirements
	}
	return nil
}

func (m *TestUnit) GetBuildPayload() *BuildPayload {
	if m != nil {
		return m.BuildPayload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestUnit) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestUnit_GceTestCfg)(nil),
		(*TestUnit_HwTestCfg)(nil),
		(*TestUnit_MoblabVmTestCfg)(nil),
		(*TestUnit_TastVmTestCfg)(nil),
		(*TestUnit_VmTestCfg)(nil),
	}
}

func init() {
	proto.RegisterType((*FilePath)(nil), "testplans.FilePath")
	proto.RegisterType((*GenerateTestPlanRequest)(nil), "testplans.GenerateTestPlanRequest")
	proto.RegisterType((*GenerateTestPlanResponse)(nil), "testplans.GenerateTestPlanResponse")
	proto.RegisterType((*Image)(nil), "testplans.Image")
	proto.RegisterType((*BuildPayload)(nil), "testplans.BuildPayload")
	proto.RegisterType((*SchedulingRequirements)(nil), "testplans.SchedulingRequirements")
	proto.RegisterType((*TestUnit)(nil), "testplans.TestUnit")
}

func init() { proto.RegisterFile("testplans/generate_test_plan.proto", fileDescriptor_e8083f85c67203f6) }

var fileDescriptor_e8083f85c67203f6 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x51, 0x4f, 0xdb, 0x30,
	0x10, 0xa6, 0x74, 0x40, 0x73, 0x6d, 0x35, 0xe4, 0x31, 0x1a, 0x31, 0x21, 0xb1, 0x22, 0x31, 0x9e,
	0xda, 0x09, 0xc4, 0xa4, 0x49, 0x7b, 0x59, 0x91, 0x06, 0x48, 0xdb, 0x84, 0x32, 0xb6, 0x07, 0x5e,
	0x22, 0x37, 0x5c, 0x5c, 0x6b, 0x89, 0x5d, 0x6c, 0x07, 0xc4, 0x9f, 0xdd, 0x0f, 0xd8, 0xaf, 0x98,
	0x72, 0x49, 0x5a, 0x23, 0xd8, 0x9b, 0xef, 0xf3, 0x7d, 0xdf, 0xdd, 0x7d, 0xe7, 0x04, 0x86, 0x0e,
	0xad, 0x9b, 0x67, 0x5c, 0xd9, 0xb1, 0x40, 0x85, 0x86, 0x3b, 0x8c, 0x4b, 0x28, 0x2e, 0xb1, 0xd1,
	0xdc, 0x68, 0xa7, 0x59, 0xb0, 0xc8, 0xd9, 0x19, 0x2f, 0xd3, 0x1d, 0x37, 0x02, 0x5d, 0x95, 0x6c,
	0xf0, 0xb6, 0x90, 0x06, 0x73, 0x54, 0xce, 0xc6, 0x89, 0x56, 0xa9, 0x14, 0x15, 0x77, 0xf8, 0x0e,
	0x3a, 0x5f, 0x64, 0x86, 0x97, 0xdc, 0xcd, 0xd8, 0x1b, 0x08, 0x52, 0x99, 0x61, 0x3c, 0xe7, 0x6e,
	0x16, 0xb6, 0xf6, 0x5a, 0x87, 0x41, 0xd4, 0x49, 0xeb, 0xcb, 0xe1, 0x9f, 0x16, 0x0c, 0xce, 0xea,
	0x0e, 0xae, 0xd0, 0xba, 0xcb, 0x8c, 0xab, 0x08, 0x6f, 0x0b, 0xb4, 0x8e, 0x9d, 0xc0, 0xc0, 0xea,
	0xc2, 0x24, 0x18, 0x3b, 0x83, 0x58, 0x17, 0xf0, 0x65, 0xb6, 0xaa, 0xeb, 0x2b, 0x83, 0x78, 0x4a,
	0x97, 0x54, 0xef, 0x33, 0xec, 0xfe, 0xb7, 0x49, 0x22, 0xaf, 0x12, 0x79, 0xa7, 0x4a, 0x2a, 0x8b,
	0x46, 0x5e, 0x0a, 0x49, 0x5c, 0xc0, 0xf6, 0xb4, 0x90, 0xd9, 0xcd, 0xb4, 0x48, 0x7e, 0xa3, 0x8b,
	0xe9, 0x5c, 0x71, 0xdb, 0x7b, 0xed, 0xc3, 0xee, 0xd1, 0xab, 0xd1, 0xc2, 0x90, 0x51, 0x33, 0x67,
	0xb4, 0xe5, 0x51, 0x26, 0xe5, 0x91, 0x06, 0xfc, 0x0a, 0xe1, 0xd3, 0xf9, 0xec, 0x5c, 0x2b, 0x8b,
	0xec, 0x3d, 0x90, 0xc7, 0x71, 0xa1, 0xa4, 0x0b, 0x5b, 0x4f, 0x94, 0xcb, 0xfc, 0x9f, 0x4a, 0xba,
	0xa8, 0xe3, 0xea, 0xd3, 0xf0, 0x00, 0xd6, 0x2e, 0x72, 0x2e, 0x90, 0xed, 0x02, 0xc8, 0xf2, 0x10,
	0x2b, 0x9e, 0x63, 0x6d, 0x47, 0x40, 0xc8, 0x77, 0x9e, 0xe3, 0xb0, 0x80, 0x5e, 0xdd, 0xc2, 0x43,
	0xa6, 0xf9, 0x0d, 0x0b, 0x61, 0xe3, 0x0e, 0x8d, 0x95, 0x5a, 0xd5, 0xb9, 0x4d, 0xc8, 0x0e, 0x60,
	0x8d, 0x68, 0xe1, 0x2a, 0xd5, 0xdf, 0xf4, 0xea, 0x53, 0xa5, 0xa8, 0xba, 0x66, 0xfb, 0xd0, 0xe7,
	0xc6, 0xc9, 0x94, 0x27, 0xae, 0x71, 0xa2, 0xd4, 0xe9, 0x35, 0x60, 0x3d, 0xec, 0xf6, 0x8f, 0x64,
	0x86, 0x37, 0x45, 0x26, 0x95, 0xf0, 0x5d, 0x65, 0xfb, 0xd0, 0xab, 0x5c, 0xac, 0x5c, 0xaf, 0x76,
	0x70, 0xbe, 0x12, 0x75, 0x09, 0xbd, 0x22, 0x70, 0xd2, 0x87, 0x6e, 0xb3, 0xb9, 0x87, 0x39, 0x0e,
	0xff, 0xb6, 0xa1, 0xd3, 0x78, 0xc0, 0x3e, 0x42, 0x4f, 0x24, 0xf5, 0x23, 0x4d, 0x52, 0x41, 0x63,
	0x74, 0x8f, 0x5e, 0x7b, 0xed, 0x9e, 0x25, 0xe4, 0xf0, 0x69, 0x2a, 0xce, 0x57, 0x22, 0x10, 0x8b,
	0x88, 0x7d, 0x80, 0xee, 0xec, 0x7e, 0xc9, 0x5c, 0x25, 0xe6, 0x96, 0xc7, 0x3c, 0xbf, 0x5f, 0x12,
	0x83, 0x59, 0x13, 0xb0, 0x0b, 0x60, 0xb9, 0x9e, 0x66, 0x7c, 0x1a, 0xdf, 0xe5, 0x4b, 0x7a, 0x9b,
	0xe8, 0x3b, 0x1e, 0xfd, 0x1b, 0x25, 0xfd, 0xca, 0x97, 0x22, 0x2f, 0xf3, 0xc7, 0x10, 0x3b, 0x85,
	0x4d, 0xc7, 0xad, 0x7b, 0x24, 0xf4, 0x82, 0x84, 0x42, 0x7f, 0xe1, 0xdc, 0x3a, 0x5f, 0xa6, 0xef,
	0x7c, 0xa0, 0x9c, 0xc3, 0xe7, 0xaf, 0x3d, 0x99, 0xc3, 0xe7, 0x06, 0x77, 0x0b, 0xde, 0x35, 0x0c,
	0xec, 0x62, 0x2b, 0x8f, 0xbe, 0x87, 0x70, 0x9d, 0x34, 0xde, 0x7a, 0x1a, 0xcf, 0xef, 0x2f, 0xda,
	0xb6, 0xcf, 0xef, 0xf5, 0x13, 0xf4, 0x9b, 0xaf, 0x83, 0x5e, 0x5a, 0xb8, 0x41, 0x8a, 0x03, 0x4f,
	0xd1, 0x7f, 0x88, 0x51, 0xf5, 0x0a, 0xea, 0x68, 0x12, 0xc0, 0x46, 0xdd, 0xe4, 0xe4, 0xe4, 0xfa,
	0x58, 0xe8, 0x51, 0x32, 0x33, 0x3a, 0x97, 0x45, 0x3e, 0xd2, 0x46, 0x8c, 0x9b, 0x40, 0xdb, 0xb1,
	0x54, 0xa9, 0xe1, 0x63, 0xfa, 0xb7, 0x8c, 0x85, 0x5e, 0xfe, 0x8e, 0xa6, 0xeb, 0x84, 0x1d, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x77, 0x10, 0xbd, 0xd1, 0x04, 0x00, 0x00,
}
