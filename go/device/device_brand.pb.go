// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/device_brand.proto

package device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This is the information that makes a device uniquely recognizable to an end
// user. There is some type of marketing name users will recognize and this is
// generally the level at which we sign devices for verified boot.
type DeviceBrand struct {
	// Required. Unique ID of the Brand.
	Id *DeviceBrandId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Parent Device Model for the given Brand.
	DeviceModelId *DeviceModelId `protobuf:"bytes,2,opt,name=device_model_id,json=deviceModelId,proto3" json:"device_model_id,omitempty"`
	// Required. OEM the device will be sold by.
	OemId *PartnerId `protobuf:"bytes,3,opt,name=oem_id,json=oemId,proto3" json:"oem_id,omitempty"`
	// Required. Marketing name used with end users.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Unique RLZ code for the given product.
	BrandCode            string   `protobuf:"bytes,5,opt,name=brand_code,json=brandCode,proto3" json:"brand_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceBrand) Reset()         { *m = DeviceBrand{} }
func (m *DeviceBrand) String() string { return proto.CompactTextString(m) }
func (*DeviceBrand) ProtoMessage()    {}
func (*DeviceBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b42890d1cc8d663, []int{0}
}

func (m *DeviceBrand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceBrand.Unmarshal(m, b)
}
func (m *DeviceBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceBrand.Marshal(b, m, deterministic)
}
func (m *DeviceBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceBrand.Merge(m, src)
}
func (m *DeviceBrand) XXX_Size() int {
	return xxx_messageInfo_DeviceBrand.Size(m)
}
func (m *DeviceBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceBrand.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceBrand proto.InternalMessageInfo

func (m *DeviceBrand) GetId() *DeviceBrandId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeviceBrand) GetDeviceModelId() *DeviceModelId {
	if m != nil {
		return m.DeviceModelId
	}
	return nil
}

func (m *DeviceBrand) GetOemId() *PartnerId {
	if m != nil {
		return m.OemId
	}
	return nil
}

func (m *DeviceBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceBrand) GetBrandCode() string {
	if m != nil {
		return m.BrandCode
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceBrand)(nil), "device.DeviceBrand")
}

func init() { proto.RegisterFile("device/device_brand.proto", fileDescriptor_7b42890d1cc8d663) }

var fileDescriptor_7b42890d1cc8d663 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0xb5, 0x5d, 0xe8, 0x14, 0x11, 0x03, 0xe2, 0x2a, 0x0a, 0x45, 0x10, 0xf6, 0x94,
	0x48, 0x3d, 0x7b, 0xa9, 0x5e, 0x72, 0x10, 0x24, 0x47, 0x2f, 0x25, 0xdd, 0x19, 0xd7, 0x80, 0xc9,
	0x94, 0x58, 0x7d, 0x4e, 0x1f, 0x49, 0x36, 0xd9, 0x6a, 0x29, 0x3d, 0x25, 0x33, 0xdf, 0xff, 0x25,
	0x99, 0xc0, 0x05, 0xd2, 0xb7, 0x6b, 0x49, 0xe5, 0x65, 0xb9, 0x8a, 0x36, 0xa0, 0x5c, 0x47, 0xde,
	0xb0, 0xa8, 0x72, 0xef, 0xf2, 0xea, 0x40, 0x64, 0xe9, 0x86, 0xd4, 0x3e, 0xf5, 0x8c, 0xf4, 0xf1,
	0x4f, 0xcf, 0x07, 0xba, 0xb6, 0x71, 0x13, 0x28, 0xfe, 0x81, 0x9b, 0x9f, 0x02, 0xa6, 0x4f, 0x89,
	0x2d, 0xfa, 0xf3, 0xc4, 0x2d, 0x94, 0x0e, 0xeb, 0x62, 0x56, 0x34, 0xd3, 0xf9, 0x99, 0xcc, 0x96,
	0xdc, 0x09, 0x68, 0x34, 0xa5, 0x43, 0xf1, 0x00, 0x27, 0x7b, 0x17, 0xd5, 0xe5, 0x21, 0xe7, 0xb9,
	0xa7, 0x1a, 0xcd, 0x31, 0xee, 0x96, 0xa2, 0x81, 0x8a, 0xc9, 0xf7, 0xd6, 0x51, 0xb2, 0x4e, 0xb7,
	0xd6, 0x4b, 0x7e, 0x9f, 0x46, 0x33, 0x66, 0xf2, 0x1a, 0x85, 0x80, 0x51, 0xb0, 0x9e, 0xea, 0xd1,
	0xac, 0x68, 0x26, 0x26, 0xed, 0xc5, 0x35, 0x40, 0x1e, 0xbe, 0x65, 0xa4, 0x7a, 0x9c, 0xc8, 0x24,
	0x75, 0x1e, 0x19, 0x69, 0x31, 0x7f, 0xbd, 0xeb, 0x58, 0xb6, 0xef, 0x91, 0xbd, 0xfb, 0xf2, 0x92,
	0x63, 0xa7, 0xb6, 0x05, 0x7f, 0x2a, 0x17, 0xde, 0xa2, 0x55, 0x69, 0x78, 0xd5, 0xf1, 0xf0, 0x5d,
	0xab, 0x2a, 0x35, 0xee, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xac, 0x99, 0xf2, 0xde, 0x87, 0x01,
	0x00, 0x00,
}
