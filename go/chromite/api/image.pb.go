// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chromite/api/image.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	chromiumos "go.chromium.org/chromiumos/infra/proto/go/chromiumos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The types of images that can be built.
type Image_Type int32

const (
	Image_IMAGE_TYPE_UNDEFINED Image_Type = 0
	Image_BASE                 Image_Type = 1
	Image_DEV                  Image_Type = 2
	Image_TEST                 Image_Type = 3
)

var Image_Type_name = map[int32]string{
	0: "IMAGE_TYPE_UNDEFINED",
	1: "BASE",
	2: "DEV",
	3: "TEST",
}

var Image_Type_value = map[string]int32{
	"IMAGE_TYPE_UNDEFINED": 0,
	"BASE":                 1,
	"DEV":                  2,
	"TEST":                 3,
}

func (x Image_Type) String() string {
	return proto.EnumName(Image_Type_name, int32(x))
}

func (Image_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{0, 0}
}

// Image argument - encapsulate data about an image.
type Image struct {
	// Path to the image file.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The image type.
	Type Image_Type `protobuf:"varint,2,opt,name=type,proto3,enum=chromite.api.Image_Type" json:"type,omitempty"`
	// The build target used to create the image.
	BuildTarget          *chromiumos.BuildTarget `protobuf:"bytes,3,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Image) GetType() Image_Type {
	if m != nil {
		return m.Type
	}
	return Image_IMAGE_TYPE_UNDEFINED
}

func (m *Image) GetBuildTarget() *chromiumos.BuildTarget {
	if m != nil {
		return m.BuildTarget
	}
	return nil
}

// The image test arguments.
type CreateImageRequest struct {
	// Required.
	// The build target whose image is being built.
	BuildTarget *chromiumos.BuildTarget `protobuf:"bytes,1,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// The types of images to build, defaults to building base image.
	ImageTypes []Image_Type `protobuf:"varint,2,rep,packed,name=image_types,json=imageTypes,proto3,enum=chromite.api.Image_Type" json:"image_types,omitempty"`
	// Whether rootfs verification should be disabled (enabled by default).
	DisableRootfsVerification bool `protobuf:"varint,3,opt,name=disable_rootfs_verification,json=disableRootfsVerification,proto3" json:"disable_rootfs_verification,omitempty"`
	// The image version.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Disk layout option. See README.disk_layout and legacy_disk_layout.json in
	// src/scripts/build_library.
	DiskLayout string `protobuf:"bytes,5,opt,name=disk_layout,json=diskLayout,proto3" json:"disk_layout,omitempty"`
	// Used to set the LSB builder path key in /etc/lsb-release. See
	// chromite/scripts/cros_set_lsb_release.py.
	BuilderPath string `protobuf:"bytes,6,opt,name=builder_path,json=builderPath,proto3" json:"builder_path,omitempty"`
	// The chroot to use to execute the endpoint.
	Chroot               *chromiumos.Chroot `protobuf:"bytes,7,opt,name=chroot,proto3" json:"chroot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateImageRequest) Reset()         { *m = CreateImageRequest{} }
func (m *CreateImageRequest) String() string { return proto.CompactTextString(m) }
func (*CreateImageRequest) ProtoMessage()    {}
func (*CreateImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{1}
}

func (m *CreateImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateImageRequest.Unmarshal(m, b)
}
func (m *CreateImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateImageRequest.Marshal(b, m, deterministic)
}
func (m *CreateImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateImageRequest.Merge(m, src)
}
func (m *CreateImageRequest) XXX_Size() int {
	return xxx_messageInfo_CreateImageRequest.Size(m)
}
func (m *CreateImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateImageRequest proto.InternalMessageInfo

func (m *CreateImageRequest) GetBuildTarget() *chromiumos.BuildTarget {
	if m != nil {
		return m.BuildTarget
	}
	return nil
}

func (m *CreateImageRequest) GetImageTypes() []Image_Type {
	if m != nil {
		return m.ImageTypes
	}
	return nil
}

func (m *CreateImageRequest) GetDisableRootfsVerification() bool {
	if m != nil {
		return m.DisableRootfsVerification
	}
	return false
}

func (m *CreateImageRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CreateImageRequest) GetDiskLayout() string {
	if m != nil {
		return m.DiskLayout
	}
	return ""
}

func (m *CreateImageRequest) GetBuilderPath() string {
	if m != nil {
		return m.BuilderPath
	}
	return ""
}

func (m *CreateImageRequest) GetChroot() *chromiumos.Chroot {
	if m != nil {
		return m.Chroot
	}
	return nil
}

type CreateImageResult struct {
	// Whether it completed successfully.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Images that were built. Will contain no more than one per image type.
	Images []*Image `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	// Any packages that failed to build. Empty on success.
	FailedPackages       []*chromiumos.PackageInfo `protobuf:"bytes,3,rep,name=failed_packages,json=failedPackages,proto3" json:"failed_packages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CreateImageResult) Reset()         { *m = CreateImageResult{} }
func (m *CreateImageResult) String() string { return proto.CompactTextString(m) }
func (*CreateImageResult) ProtoMessage()    {}
func (*CreateImageResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{2}
}

func (m *CreateImageResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateImageResult.Unmarshal(m, b)
}
func (m *CreateImageResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateImageResult.Marshal(b, m, deterministic)
}
func (m *CreateImageResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateImageResult.Merge(m, src)
}
func (m *CreateImageResult) XXX_Size() int {
	return xxx_messageInfo_CreateImageResult.Size(m)
}
func (m *CreateImageResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateImageResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateImageResult proto.InternalMessageInfo

func (m *CreateImageResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateImageResult) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *CreateImageResult) GetFailedPackages() []*chromiumos.PackageInfo {
	if m != nil {
		return m.FailedPackages
	}
	return nil
}

type CreateVmRequest struct {
	// The image to convert to a VM.
	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The chroot to use to execute the endpoint.
	Chroot               *chromiumos.Chroot `protobuf:"bytes,2,opt,name=chroot,proto3" json:"chroot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateVmRequest) Reset()         { *m = CreateVmRequest{} }
func (m *CreateVmRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVmRequest) ProtoMessage()    {}
func (*CreateVmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{3}
}

func (m *CreateVmRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVmRequest.Unmarshal(m, b)
}
func (m *CreateVmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVmRequest.Marshal(b, m, deterministic)
}
func (m *CreateVmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVmRequest.Merge(m, src)
}
func (m *CreateVmRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVmRequest.Size(m)
}
func (m *CreateVmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVmRequest proto.InternalMessageInfo

func (m *CreateVmRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CreateVmRequest) GetChroot() *chromiumos.Chroot {
	if m != nil {
		return m.Chroot
	}
	return nil
}

// A VM image.
type VmImage struct {
	// Path to the image.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmImage) Reset()         { *m = VmImage{} }
func (m *VmImage) String() string { return proto.CompactTextString(m) }
func (*VmImage) ProtoMessage()    {}
func (*VmImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{4}
}

func (m *VmImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmImage.Unmarshal(m, b)
}
func (m *VmImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmImage.Marshal(b, m, deterministic)
}
func (m *VmImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmImage.Merge(m, src)
}
func (m *VmImage) XXX_Size() int {
	return xxx_messageInfo_VmImage.Size(m)
}
func (m *VmImage) XXX_DiscardUnknown() {
	xxx_messageInfo_VmImage.DiscardUnknown(m)
}

var xxx_messageInfo_VmImage proto.InternalMessageInfo

func (m *VmImage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CreateVmResponse struct {
	// The created VM path.
	VmImage              *VmImage `protobuf:"bytes,1,opt,name=vm_image,json=vmImage,proto3" json:"vm_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVmResponse) Reset()         { *m = CreateVmResponse{} }
func (m *CreateVmResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVmResponse) ProtoMessage()    {}
func (*CreateVmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{5}
}

func (m *CreateVmResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVmResponse.Unmarshal(m, b)
}
func (m *CreateVmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVmResponse.Marshal(b, m, deterministic)
}
func (m *CreateVmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVmResponse.Merge(m, src)
}
func (m *CreateVmResponse) XXX_Size() int {
	return xxx_messageInfo_CreateVmResponse.Size(m)
}
func (m *CreateVmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVmResponse proto.InternalMessageInfo

func (m *CreateVmResponse) GetVmImage() *VmImage {
	if m != nil {
		return m.VmImage
	}
	return nil
}

// The image test arguments.
type TestImageRequest struct {
	// The image to be tested.
	// Image.path is required.
	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The build target whose image is being tested.
	// BuildTarget.name is required.
	BuildTarget *chromiumos.BuildTarget `protobuf:"bytes,2,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// Required.
	Result *TestImageRequest_Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// The chroot to use to execute the endpoint.
	Chroot               *chromiumos.Chroot `protobuf:"bytes,4,opt,name=chroot,proto3" json:"chroot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TestImageRequest) Reset()         { *m = TestImageRequest{} }
func (m *TestImageRequest) String() string { return proto.CompactTextString(m) }
func (*TestImageRequest) ProtoMessage()    {}
func (*TestImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{6}
}

func (m *TestImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestImageRequest.Unmarshal(m, b)
}
func (m *TestImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestImageRequest.Marshal(b, m, deterministic)
}
func (m *TestImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestImageRequest.Merge(m, src)
}
func (m *TestImageRequest) XXX_Size() int {
	return xxx_messageInfo_TestImageRequest.Size(m)
}
func (m *TestImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestImageRequest proto.InternalMessageInfo

func (m *TestImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *TestImageRequest) GetBuildTarget() *chromiumos.BuildTarget {
	if m != nil {
		return m.BuildTarget
	}
	return nil
}

func (m *TestImageRequest) GetResult() *TestImageRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TestImageRequest) GetChroot() *chromiumos.Chroot {
	if m != nil {
		return m.Chroot
	}
	return nil
}

// Test results options specifications.
type TestImageRequest_Result struct {
	// Location where the test results should be written.
	Directory            string   `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestImageRequest_Result) Reset()         { *m = TestImageRequest_Result{} }
func (m *TestImageRequest_Result) String() string { return proto.CompactTextString(m) }
func (*TestImageRequest_Result) ProtoMessage()    {}
func (*TestImageRequest_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{6, 0}
}

func (m *TestImageRequest_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestImageRequest_Result.Unmarshal(m, b)
}
func (m *TestImageRequest_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestImageRequest_Result.Marshal(b, m, deterministic)
}
func (m *TestImageRequest_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestImageRequest_Result.Merge(m, src)
}
func (m *TestImageRequest_Result) XXX_Size() int {
	return xxx_messageInfo_TestImageRequest_Result.Size(m)
}
func (m *TestImageRequest_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_TestImageRequest_Result.DiscardUnknown(m)
}

var xxx_messageInfo_TestImageRequest_Result proto.InternalMessageInfo

func (m *TestImageRequest_Result) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

type TestImageResult struct {
	// Whether all tests passed.
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestImageResult) Reset()         { *m = TestImageResult{} }
func (m *TestImageResult) String() string { return proto.CompactTextString(m) }
func (*TestImageResult) ProtoMessage()    {}
func (*TestImageResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_abef4ffabc69f3ed, []int{7}
}

func (m *TestImageResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestImageResult.Unmarshal(m, b)
}
func (m *TestImageResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestImageResult.Marshal(b, m, deterministic)
}
func (m *TestImageResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestImageResult.Merge(m, src)
}
func (m *TestImageResult) XXX_Size() int {
	return xxx_messageInfo_TestImageResult.Size(m)
}
func (m *TestImageResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestImageResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestImageResult proto.InternalMessageInfo

func (m *TestImageResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterEnum("chromite.api.Image_Type", Image_Type_name, Image_Type_value)
	proto.RegisterType((*Image)(nil), "chromite.api.Image")
	proto.RegisterType((*CreateImageRequest)(nil), "chromite.api.CreateImageRequest")
	proto.RegisterType((*CreateImageResult)(nil), "chromite.api.CreateImageResult")
	proto.RegisterType((*CreateVmRequest)(nil), "chromite.api.CreateVmRequest")
	proto.RegisterType((*VmImage)(nil), "chromite.api.VmImage")
	proto.RegisterType((*CreateVmResponse)(nil), "chromite.api.CreateVmResponse")
	proto.RegisterType((*TestImageRequest)(nil), "chromite.api.TestImageRequest")
	proto.RegisterType((*TestImageRequest_Result)(nil), "chromite.api.TestImageRequest.Result")
	proto.RegisterType((*TestImageResult)(nil), "chromite.api.TestImageResult")
}

func init() { proto.RegisterFile("chromite/api/image.proto", fileDescriptor_abef4ffabc69f3ed) }

var fileDescriptor_abef4ffabc69f3ed = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xd3, 0x48,
	0x14, 0x5e, 0x3b, 0xa9, 0x93, 0x9e, 0x74, 0x5b, 0xef, 0xec, 0xae, 0x6a, 0x4c, 0x7f, 0x82, 0x25,
	0x50, 0xa1, 0xc8, 0x41, 0x41, 0x42, 0x80, 0x54, 0x44, 0xdb, 0x18, 0x14, 0x01, 0x55, 0x71, 0x43,
	0x24, 0xb8, 0xb1, 0x1c, 0x67, 0x92, 0x8e, 0x1a, 0x67, 0xcc, 0xcc, 0x24, 0x52, 0xee, 0xb9, 0xe4,
	0x11, 0x78, 0x9a, 0x8a, 0x57, 0xe0, 0x31, 0xfa, 0x0e, 0xc8, 0x63, 0xa7, 0xb1, 0xfb, 0x93, 0xd2,
	0xbb, 0x99, 0xf3, 0x7d, 0x33, 0xe7, 0x3b, 0xdf, 0x39, 0x1e, 0x83, 0x11, 0x1c, 0x33, 0x1a, 0x12,
	0x81, 0x6b, 0x7e, 0x44, 0x6a, 0x24, 0xf4, 0xfb, 0xd8, 0x8e, 0x18, 0x15, 0x14, 0x2d, 0x4d, 0x11,
	0xdb, 0x8f, 0x88, 0xb9, 0x96, 0xe3, 0x75, 0x46, 0x64, 0xd0, 0xf5, 0xfc, 0x88, 0x24, 0x5c, 0x73,
	0x35, 0x41, 0x47, 0x21, 0xe5, 0xb5, 0x80, 0x86, 0x21, 0x1d, 0x26, 0x80, 0xf5, 0x53, 0x81, 0x85,
	0x66, 0x7c, 0x29, 0x42, 0x50, 0x8c, 0x7c, 0x71, 0x6c, 0x28, 0x55, 0x65, 0x6b, 0xd1, 0x95, 0x6b,
	0xf4, 0x18, 0x8a, 0x62, 0x12, 0x61, 0x43, 0xad, 0x2a, 0x5b, 0xcb, 0x75, 0xc3, 0xce, 0x66, 0xb4,
	0xe5, 0x31, 0xbb, 0x35, 0x89, 0xb0, 0x2b, 0x59, 0xe8, 0x25, 0x2c, 0x25, 0x79, 0x85, 0xcf, 0xfa,
	0x58, 0x18, 0x85, 0xaa, 0xb2, 0x55, 0xa9, 0xaf, 0xda, 0xb3, 0xdc, 0xf6, 0x5e, 0x8c, 0xb7, 0x24,
	0xec, 0x56, 0x3a, 0xb3, 0x8d, 0xb5, 0x03, 0xc5, 0xf8, 0x26, 0x64, 0xc0, 0x7f, 0xcd, 0x0f, 0xbb,
	0x6f, 0x1d, 0xaf, 0xf5, 0xf9, 0xd0, 0xf1, 0x3e, 0x1d, 0x34, 0x9c, 0x37, 0xcd, 0x03, 0xa7, 0xa1,
	0xff, 0x85, 0xca, 0x50, 0xdc, 0xdb, 0x3d, 0x72, 0x74, 0x05, 0x95, 0xa0, 0xd0, 0x70, 0xda, 0xba,
	0x1a, 0x87, 0x5a, 0xce, 0x51, 0x4b, 0x2f, 0x58, 0xbf, 0x54, 0x40, 0xfb, 0x0c, 0xfb, 0x02, 0x4b,
	0x55, 0x2e, 0xfe, 0x3a, 0xc2, 0x5c, 0x5c, 0x52, 0xa4, 0xfc, 0xb9, 0x22, 0xf4, 0x02, 0x2a, 0xd2,
	0x6d, 0x2f, 0xae, 0x8d, 0x1b, 0x6a, 0xb5, 0x30, 0xd7, 0x02, 0x90, 0xe4, 0x78, 0xc9, 0xd1, 0x2b,
	0xb8, 0xdb, 0x25, 0xdc, 0xef, 0x0c, 0xb0, 0xc7, 0x28, 0x15, 0x3d, 0xee, 0x8d, 0x31, 0x23, 0x3d,
	0x12, 0xf8, 0x82, 0xd0, 0xa1, 0xf4, 0xa5, 0xec, 0xde, 0x49, 0x29, 0xae, 0x64, 0xb4, 0x33, 0x04,
	0x64, 0x40, 0x69, 0x8c, 0x19, 0x8f, 0xb9, 0x45, 0xd9, 0x8d, 0xe9, 0x16, 0x6d, 0x42, 0xa5, 0x4b,
	0xf8, 0x89, 0x37, 0xf0, 0x27, 0x74, 0x24, 0x8c, 0x05, 0x89, 0x42, 0x1c, 0x7a, 0x2f, 0x23, 0xe8,
	0x5e, 0x5a, 0x31, 0x66, 0x9e, 0xec, 0xa6, 0x26, 0x19, 0x95, 0x34, 0x76, 0x18, 0x37, 0xf5, 0x11,
	0x68, 0x71, 0x11, 0x54, 0x18, 0x25, 0x69, 0x07, 0xca, 0xda, 0xb1, 0x2f, 0x11, 0x37, 0x65, 0x58,
	0x3f, 0x14, 0xf8, 0x27, 0xe7, 0x2b, 0x1f, 0x0d, 0x44, 0xac, 0x8f, 0x8f, 0x82, 0x00, 0x73, 0x2e,
	0x1d, 0x2d, 0xbb, 0xd3, 0x2d, 0xda, 0x06, 0x4d, 0xfa, 0x90, 0xf8, 0x55, 0xa9, 0xff, 0x7b, 0x85,
	0x5f, 0x6e, 0x4a, 0x41, 0xaf, 0x61, 0xa5, 0xe7, 0x93, 0x01, 0xee, 0x7a, 0x91, 0x1f, 0x9c, 0xc8,
	0x53, 0x05, 0x79, 0x2a, 0xd7, 0xa0, 0xc3, 0x04, 0x6b, 0x0e, 0x7b, 0xd4, 0x5d, 0x4e, 0xf8, 0x69,
	0x88, 0x5b, 0xc7, 0xb0, 0x92, 0xa8, 0x6b, 0x87, 0xd3, 0x96, 0x3f, 0x84, 0x05, 0x79, 0x7d, 0xda,
	0xeb, 0x2b, 0x05, 0x24, 0x8c, 0x8c, 0x11, 0xea, 0x8d, 0x46, 0xac, 0x43, 0xa9, 0x1d, 0x5e, 0xfb,
	0xa1, 0x58, 0x0d, 0xd0, 0x67, 0x42, 0x78, 0x44, 0x87, 0x1c, 0xa3, 0x27, 0x50, 0x1e, 0x87, 0x5e,
	0x56, 0xcc, 0xff, 0x79, 0x31, 0xe9, 0x85, 0x6e, 0x69, 0x9c, 0x2c, 0xac, 0xef, 0x2a, 0xe8, 0x2d,
	0xcc, 0x45, 0x6e, 0x86, 0x6f, 0x51, 0xd0, 0xc5, 0x71, 0x57, 0x6f, 0x31, 0xee, 0x3b, 0xa0, 0x31,
	0xd9, 0xdd, 0xf4, 0xb3, 0xbd, 0x9f, 0xcf, 0x73, 0x51, 0x96, 0x9d, 0x8c, 0x82, 0x9b, 0x1e, 0xca,
	0x78, 0x59, 0xbc, 0xc9, 0x4b, 0xf3, 0x01, 0x68, 0xe9, 0x20, 0xad, 0xc1, 0x62, 0x97, 0x30, 0x1c,
	0x08, 0xca, 0x26, 0xa9, 0x9f, 0xb3, 0x80, 0xb5, 0x0d, 0x2b, 0x99, 0xb4, 0xf3, 0x27, 0xaf, 0xfe,
	0x4d, 0x85, 0x25, 0xc9, 0x3c, 0xc2, 0x6c, 0x4c, 0x02, 0x8c, 0xde, 0x81, 0x96, 0xb4, 0x04, 0x55,
	0xf3, 0xa5, 0x5c, 0x7e, 0x27, 0xcc, 0xcd, 0x39, 0x0c, 0x99, 0xf7, 0x23, 0x94, 0xa7, 0xfd, 0x45,
	0xeb, 0x57, 0x91, 0xcf, 0x07, 0xd0, 0xdc, 0xb8, 0x0e, 0x4e, 0xc6, 0xc2, 0xd2, 0x4e, 0xcf, 0x4c,
	0x55, 0x57, 0x91, 0x03, 0xc5, 0xb8, 0x3a, 0xb4, 0x31, 0xdf, 0x68, 0x73, 0xfd, 0x5a, 0x3c, 0x56,
	0x66, 0xfe, 0x7d, 0x7a, 0x66, 0x2e, 0xa6, 0x23, 0xa2, 0x2b, 0x7b, 0xcf, 0xbf, 0x3c, 0xeb, 0xd3,
	0x73, 0xef, 0x6d, 0xca, 0xfa, 0xb5, 0xcc, 0xd3, 0x4f, 0x86, 0x3d, 0xe6, 0xd7, 0xe4, 0xcb, 0x5f,
	0xeb, 0xd3, 0x5a, 0xf6, 0x97, 0xd1, 0xd1, 0x64, 0xf8, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x18, 0xf5, 0x01, 0x65, 0x71, 0x06, 0x00, 0x00,
}
