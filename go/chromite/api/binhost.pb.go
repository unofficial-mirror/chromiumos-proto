// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chromite/api/binhost.proto

package chromite_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "go.chromium.org/chromiumos/infra/proto/go/chromite/api"
	chromiumos "go.chromium.org/chromiumos/infra/proto/go/chromiumos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Portage environment variable that points to a remote binhost.
type BinhostKey int32

const (
	// No binhost key was specified.
	BinhostKey_UNSPECIFIED BinhostKey = 0
	// An innocuous binhost for testing.
	BinhostKey_DUMMY_BINHOST BinhostKey = 1
	// Contains prebuilts generated by the postsubmit builder.
	BinhostKey_POSTSUBMIT_BINHOST BinhostKey = 2
	// Contains prebuilts generated by the PFQ.
	BinhostKey_LATEST_RELEASE_CHROME_BINHOST BinhostKey = 3
	// Contains prebuilts generated by pre-flight builders.
	BinhostKey_PREFLIGHT_BINHOST BinhostKey = 4
)

var BinhostKey_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "DUMMY_BINHOST",
	2: "POSTSUBMIT_BINHOST",
	3: "LATEST_RELEASE_CHROME_BINHOST",
	4: "PREFLIGHT_BINHOST",
}

var BinhostKey_value = map[string]int32{
	"UNSPECIFIED":                   0,
	"DUMMY_BINHOST":                 1,
	"POSTSUBMIT_BINHOST":            2,
	"LATEST_RELEASE_CHROME_BINHOST": 3,
	"PREFLIGHT_BINHOST":             4,
}

func (x BinhostKey) String() string {
	return proto.EnumName(BinhostKey_name, int32(x))
}

func (BinhostKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d632782a0b1177ef, []int{0}
}

// Describes where prebuilts will be uploaded so package index and other
// Portage metadata can be updated appropriately.
type PrepareBinhostUploadsRequest struct {
	// Build target to prepare prebuilts for.
	BuildTarget *chromiumos.BuildTarget `protobuf:"bytes,1,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// Full URI where we wish to store prebuilts. Note that this service
	// call does NOT upload them, it only updates metadata.
	// Example: gs://chromeos-prebuilt/board/amd64-generic/packages/
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareBinhostUploadsRequest) Reset()         { *m = PrepareBinhostUploadsRequest{} }
func (m *PrepareBinhostUploadsRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareBinhostUploadsRequest) ProtoMessage()    {}
func (*PrepareBinhostUploadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d632782a0b1177ef, []int{0}
}

func (m *PrepareBinhostUploadsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareBinhostUploadsRequest.Unmarshal(m, b)
}
func (m *PrepareBinhostUploadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareBinhostUploadsRequest.Marshal(b, m, deterministic)
}
func (m *PrepareBinhostUploadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareBinhostUploadsRequest.Merge(m, src)
}
func (m *PrepareBinhostUploadsRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareBinhostUploadsRequest.Size(m)
}
func (m *PrepareBinhostUploadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareBinhostUploadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareBinhostUploadsRequest proto.InternalMessageInfo

func (m *PrepareBinhostUploadsRequest) GetBuildTarget() *chromiumos.BuildTarget {
	if m != nil {
		return m.BuildTarget
	}
	return nil
}

func (m *PrepareBinhostUploadsRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// Return all files to upload.
type PrepareBinhostUploadsResponse struct {
	// Absolute chroot path to the local directory containing files to upload.
	UploadsDir string `protobuf:"bytes,1,opt,name=uploads_dir,json=uploadsDir,proto3" json:"uploads_dir,omitempty"`
	// All targets to be uploaded to the binhost.
	UploadTargets        []*PrepareBinhostUploadsResponse_UploadTarget `protobuf:"bytes,2,rep,name=upload_targets,json=uploadTargets,proto3" json:"upload_targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *PrepareBinhostUploadsResponse) Reset()         { *m = PrepareBinhostUploadsResponse{} }
func (m *PrepareBinhostUploadsResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareBinhostUploadsResponse) ProtoMessage()    {}
func (*PrepareBinhostUploadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d632782a0b1177ef, []int{1}
}

func (m *PrepareBinhostUploadsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareBinhostUploadsResponse.Unmarshal(m, b)
}
func (m *PrepareBinhostUploadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareBinhostUploadsResponse.Marshal(b, m, deterministic)
}
func (m *PrepareBinhostUploadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareBinhostUploadsResponse.Merge(m, src)
}
func (m *PrepareBinhostUploadsResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareBinhostUploadsResponse.Size(m)
}
func (m *PrepareBinhostUploadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareBinhostUploadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareBinhostUploadsResponse proto.InternalMessageInfo

func (m *PrepareBinhostUploadsResponse) GetUploadsDir() string {
	if m != nil {
		return m.UploadsDir
	}
	return ""
}

func (m *PrepareBinhostUploadsResponse) GetUploadTargets() []*PrepareBinhostUploadsResponse_UploadTarget {
	if m != nil {
		return m.UploadTargets
	}
	return nil
}

// An upload target is a file in the uploads_dir.
type PrepareBinhostUploadsResponse_UploadTarget struct {
	// Paths relative to uploads_dir.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareBinhostUploadsResponse_UploadTarget) Reset() {
	*m = PrepareBinhostUploadsResponse_UploadTarget{}
}
func (m *PrepareBinhostUploadsResponse_UploadTarget) String() string {
	return proto.CompactTextString(m)
}
func (*PrepareBinhostUploadsResponse_UploadTarget) ProtoMessage() {}
func (*PrepareBinhostUploadsResponse_UploadTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_d632782a0b1177ef, []int{1, 0}
}

func (m *PrepareBinhostUploadsResponse_UploadTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareBinhostUploadsResponse_UploadTarget.Unmarshal(m, b)
}
func (m *PrepareBinhostUploadsResponse_UploadTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareBinhostUploadsResponse_UploadTarget.Marshal(b, m, deterministic)
}
func (m *PrepareBinhostUploadsResponse_UploadTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareBinhostUploadsResponse_UploadTarget.Merge(m, src)
}
func (m *PrepareBinhostUploadsResponse_UploadTarget) XXX_Size() int {
	return xxx_messageInfo_PrepareBinhostUploadsResponse_UploadTarget.Size(m)
}
func (m *PrepareBinhostUploadsResponse_UploadTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareBinhostUploadsResponse_UploadTarget.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareBinhostUploadsResponse_UploadTarget proto.InternalMessageInfo

func (m *PrepareBinhostUploadsResponse_UploadTarget) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Set a binhost URL for the given build target.
type SetBinhostRequest struct {
	// Build target to update binhost for.
	BuildTarget *chromiumos.BuildTarget `protobuf:"bytes,1,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// Whether or not the binhost is private.
	Private bool `protobuf:"varint,2,opt,name=private,proto3" json:"private,omitempty"`
	// Binhost key to set or update.
	Key BinhostKey `protobuf:"varint,3,opt,name=key,proto3,enum=chromite.api.BinhostKey" json:"key,omitempty"`
	// URI storing all the binaries.
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBinhostRequest) Reset()         { *m = SetBinhostRequest{} }
func (m *SetBinhostRequest) String() string { return proto.CompactTextString(m) }
func (*SetBinhostRequest) ProtoMessage()    {}
func (*SetBinhostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d632782a0b1177ef, []int{2}
}

func (m *SetBinhostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBinhostRequest.Unmarshal(m, b)
}
func (m *SetBinhostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBinhostRequest.Marshal(b, m, deterministic)
}
func (m *SetBinhostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBinhostRequest.Merge(m, src)
}
func (m *SetBinhostRequest) XXX_Size() int {
	return xxx_messageInfo_SetBinhostRequest.Size(m)
}
func (m *SetBinhostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBinhostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBinhostRequest proto.InternalMessageInfo

func (m *SetBinhostRequest) GetBuildTarget() *chromiumos.BuildTarget {
	if m != nil {
		return m.BuildTarget
	}
	return nil
}

func (m *SetBinhostRequest) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *SetBinhostRequest) GetKey() BinhostKey {
	if m != nil {
		return m.Key
	}
	return BinhostKey_UNSPECIFIED
}

func (m *SetBinhostRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// Response for SetBinhost service call.
type SetBinhostResponse struct {
	// Absolute path to the updated binhost conf file.
	OutputFile           string   `protobuf:"bytes,1,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBinhostResponse) Reset()         { *m = SetBinhostResponse{} }
func (m *SetBinhostResponse) String() string { return proto.CompactTextString(m) }
func (*SetBinhostResponse) ProtoMessage()    {}
func (*SetBinhostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d632782a0b1177ef, []int{3}
}

func (m *SetBinhostResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBinhostResponse.Unmarshal(m, b)
}
func (m *SetBinhostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBinhostResponse.Marshal(b, m, deterministic)
}
func (m *SetBinhostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBinhostResponse.Merge(m, src)
}
func (m *SetBinhostResponse) XXX_Size() int {
	return xxx_messageInfo_SetBinhostResponse.Size(m)
}
func (m *SetBinhostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBinhostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetBinhostResponse proto.InternalMessageInfo

func (m *SetBinhostResponse) GetOutputFile() string {
	if m != nil {
		return m.OutputFile
	}
	return ""
}

func init() {
	proto.RegisterEnum("chromite.api.BinhostKey", BinhostKey_name, BinhostKey_value)
	proto.RegisterType((*PrepareBinhostUploadsRequest)(nil), "chromite.api.PrepareBinhostUploadsRequest")
	proto.RegisterType((*PrepareBinhostUploadsResponse)(nil), "chromite.api.PrepareBinhostUploadsResponse")
	proto.RegisterType((*PrepareBinhostUploadsResponse_UploadTarget)(nil), "chromite.api.PrepareBinhostUploadsResponse.UploadTarget")
	proto.RegisterType((*SetBinhostRequest)(nil), "chromite.api.SetBinhostRequest")
	proto.RegisterType((*SetBinhostResponse)(nil), "chromite.api.SetBinhostResponse")
}

func init() { proto.RegisterFile("chromite/api/binhost.proto", fileDescriptor_d632782a0b1177ef) }

var fileDescriptor_d632782a0b1177ef = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xd1, 0x8e, 0xd2, 0x40,
	0x14, 0xb5, 0xb0, 0x71, 0xdd, 0x5b, 0x96, 0x85, 0x9b, 0xac, 0xdb, 0x34, 0xbb, 0xd9, 0xca, 0x13,
	0xc1, 0xa4, 0x24, 0x18, 0x13, 0xe3, 0xdb, 0xb2, 0x14, 0x69, 0x84, 0x85, 0xb4, 0xe5, 0xc1, 0xa7,
	0xa6, 0xc0, 0x28, 0x13, 0x0b, 0x33, 0x4e, 0xa7, 0x9b, 0xec, 0xab, 0x3f, 0xe3, 0x7f, 0x98, 0xf8,
	0x27, 0xbe, 0xfa, 0x0f, 0x86, 0x4e, 0xd9, 0x42, 0x74, 0x8d, 0x26, 0xbe, 0xf5, 0xde, 0x73, 0xe6,
	0xdc, 0xd3, 0x73, 0x67, 0xc0, 0x9c, 0x2f, 0x05, 0x5b, 0x51, 0x49, 0xda, 0x11, 0xa7, 0xed, 0x19,
	0x5d, 0x2f, 0x59, 0x22, 0x6d, 0x2e, 0x98, 0x64, 0x58, 0xd9, 0x62, 0x76, 0xc4, 0xa9, 0x79, 0xbe,
	0xcf, 0x4c, 0x69, 0xbc, 0x08, 0x23, 0x4e, 0x15, 0xd7, 0x3c, 0x53, 0x68, 0xba, 0x62, 0x49, 0x7b,
	0xce, 0x56, 0x2b, 0xb6, 0x56, 0x40, 0x23, 0x86, 0xf3, 0x89, 0x20, 0x3c, 0x12, 0xa4, 0xab, 0xc4,
	0xa7, 0x3c, 0x66, 0xd1, 0x22, 0xf1, 0xc8, 0xa7, 0x94, 0x24, 0x12, 0x5f, 0x43, 0x45, 0x69, 0xc9,
	0x48, 0x7c, 0x20, 0xd2, 0xd0, 0x2c, 0xad, 0xa9, 0x77, 0xce, 0xec, 0x42, 0xcf, 0xee, 0x6e, 0xf0,
	0x20, 0x83, 0x3d, 0x7d, 0x56, 0x14, 0x58, 0x83, 0x72, 0x2a, 0xa8, 0x51, 0xb2, 0xb4, 0xe6, 0x91,
	0xb7, 0xf9, 0x6c, 0x7c, 0xd3, 0xe0, 0xe2, 0x81, 0x71, 0x09, 0x67, 0xeb, 0x84, 0xe0, 0x25, 0xe8,
	0xa9, 0x6a, 0x85, 0x0b, 0x2a, 0xb2, 0x71, 0x47, 0x1e, 0xe4, 0xad, 0x1e, 0x15, 0x18, 0x42, 0x55,
	0x55, 0xb9, 0xa3, 0xc4, 0x28, 0x59, 0xe5, 0xa6, 0xde, 0x79, 0x65, 0xef, 0xc6, 0x61, 0xff, 0x71,
	0x8a, 0xad, 0xea, 0xdc, 0xf3, 0x71, 0xba, 0x53, 0x25, 0x66, 0x03, 0x2a, 0xbb, 0x30, 0x22, 0x1c,
	0xf0, 0x48, 0x2e, 0x73, 0x2b, 0xd9, 0x77, 0xe3, 0x8b, 0x06, 0x75, 0x9f, 0xc8, 0x5c, 0xfd, 0x7f,
	0x64, 0x65, 0xc0, 0x21, 0x17, 0xf4, 0x36, 0x92, 0x24, 0xcb, 0xeb, 0x89, 0xb7, 0x2d, 0xb1, 0x05,
	0xe5, 0x8f, 0xe4, 0xce, 0x28, 0x5b, 0x5a, 0xb3, 0xda, 0x31, 0xf6, 0xff, 0x32, 0x37, 0xf0, 0x96,
	0xdc, 0x79, 0x1b, 0xd2, 0x36, 0xf1, 0x83, 0x22, 0xf1, 0x97, 0x80, 0xbb, 0x46, 0x8b, 0x94, 0x59,
	0x2a, 0x79, 0x2a, 0xc3, 0xf7, 0x34, 0x26, 0xdb, 0x94, 0x55, 0xab, 0x4f, 0x63, 0xd2, 0xfa, 0xac,
	0x01, 0x14, 0xe2, 0x78, 0x02, 0xfa, 0xf4, 0xc6, 0x9f, 0x38, 0xd7, 0x6e, 0xdf, 0x75, 0x7a, 0xb5,
	0x47, 0x58, 0x87, 0xe3, 0xde, 0x74, 0x34, 0x7a, 0x17, 0x76, 0xdd, 0x9b, 0xc1, 0xd8, 0x0f, 0x6a,
	0x1a, 0x3e, 0x05, 0x9c, 0x8c, 0xfd, 0xc0, 0x9f, 0x76, 0x47, 0x6e, 0x70, 0xdf, 0x2f, 0xe1, 0x33,
	0xb8, 0x18, 0x5e, 0x05, 0x8e, 0x1f, 0x84, 0x9e, 0x33, 0x74, 0xae, 0x7c, 0x27, 0xbc, 0x1e, 0x78,
	0xe3, 0x91, 0x73, 0x4f, 0x29, 0xe3, 0x29, 0xd4, 0x27, 0x9e, 0xd3, 0x1f, 0xba, 0x6f, 0x06, 0xc5,
	0xc9, 0x83, 0xce, 0x77, 0x0d, 0xaa, 0xb9, 0x09, 0x9f, 0x88, 0x5b, 0x3a, 0x27, 0xc8, 0xe1, 0xf4,
	0xb7, 0x9b, 0xc5, 0xd6, 0x5f, 0xad, 0x3f, 0xdb, 0x93, 0xf9, 0xfc, 0x1f, 0xae, 0x0a, 0x8e, 0x01,
	0x8a, 0x00, 0xf1, 0x72, 0xff, 0xe8, 0x2f, 0x77, 0xc0, 0xb4, 0x1e, 0x26, 0x28, 0x41, 0xf3, 0xe4,
	0xeb, 0x0f, 0x53, 0x87, 0xc3, 0xfc, 0x2d, 0xd7, 0x4a, 0xb3, 0xc7, 0xd9, 0x4b, 0x7c, 0xf1, 0x33,
	0x00, 0x00, 0xff, 0xff, 0xf5, 0x7f, 0xa5, 0xc2, 0xec, 0x03, 0x00, 0x00,
}
