syntax = "proto3";
package chromite.api;

option go_package = "go.chromium.org/chromiumos/infra/proto/go/chromite/api";

import "chromite/api/build_api.proto";
import "chromite/api/sysroot.proto";
import "chromiumos/common.proto";
import "google/protobuf/empty.proto";

// Proto for executing test-related functionality.

message BuildTargetUnitTestRequest {
  // The build target being tested.
  chromiumos.BuildTarget build_target = 1;
  // The path where the result tarball should be saved.
  string result_path = 2;
  // The chroot containing the sysroot.
  chromiumos.Chroot chroot = 3;
}

message BuildTargetUnitTestResponse {
  // The unittest tarball that was created.
  string tarball_path = 1;
  // The list of packages that failed.
  repeated chromiumos.PackageInfo failed_packages = 2;
}

// Chromite UnitTest request.
message ChromiteUnitTestRequest {
  // The chroot to use to execute the endpoint.
  chromiumos.Chroot chroot = 1;
}

// Run the debug_info_test script.
message DebugInfoTestRequest {
  // The sysroot to tests.
  chromite.api.Sysroot sysroot = 1;
  // The chroot to use to execute the endpoint.
  chromiumos.Chroot chroot = 2;
}

message VmTestRequest {
  // The build target under test. Required.
  chromiumos.BuildTarget build_target = 1;

  // The chroot in which to run commands. Required.
  chromiumos.Chroot chroot = 2;

  // The VM image under test.
  message VmImage {
    // Path to the image under test. Required.
    string path = 1;
  }

  // The VM image to test. Required.
  VmImage vm_image = 3;

  // Options for SSHing into the VM.
  message SshOptions {
    // Path to the private key to the VM.
    string private_key_path = 1;

    // SSH port to communicate with VM.
    int32 port = 2;
  }

  // Options for SSHing into the VM.
  SshOptions ssh_options = 4;

  // The program that manages and runs the tests in the VM.
  enum TestHarness {
    // No test harness specified.
    UNSPECIFIED = 0;

    // Run tests with Tast.
    TAST = 1;

    // Run tests with Autotest.
    AUTOTEST = 2;
  }

  TestHarness test_harness = 5;

  // A specific VM test to run.
  message VmTest {
    // The name pattern for the VM test.
    // For Autotest, this pattern matches against the test suite name.
    // For Tast, this pattern matches against the Tast test name.
    string pattern = 1;
  }

  // All VM tests that should be run. At least one must be specified.
  repeated VmTest vm_tests = 6;
}

// The test service.
service TestService {
  option (service_options) = {
    module: "test",
    service_chroot_assert: INSIDE,
  };

  // Run a build target's ebuild unit tests.
  rpc BuildTargetUnitTest(BuildTargetUnitTestRequest)
    returns (BuildTargetUnitTestResponse) {
    option (method_options) = {
      method_chroot_assert: OUTSIDE,
    };
  }

  // Run the chromite unit tests.
  rpc ChromiteUnitTest(ChromiteUnitTestRequest) returns (google.protobuf.Empty);

  // Run the debug info tests on a sysroot.
  rpc DebugInfoTest(DebugInfoTestRequest) returns (google.protobuf.Empty);

  // Run VM tests and report failures.
  rpc VmTest(VmTestRequest) returns (google.protobuf.Empty);
}
