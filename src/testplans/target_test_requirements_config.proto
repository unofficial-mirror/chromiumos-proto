// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package testplans;

option go_package = "go.chromium.org/chromiumos/infra/proto/go/testplans";

message GceTestCfg {
  message GceTest {
    // Test type to be run.
    string test_type = 1;
    // Test suite to be run in GCETest.
    string test_suite = 2;
    // Number of seconds to wait before timing out waiting for results.
    int32 timeout_sec = 3;
    // Use the old ctest code path rather than the new chromite one.
    bool use_ctest = 4;
  }

  repeated GceTest gce_test = 1;
}

message HwTestCfg {
  // Configuration for a hardware test suite.
  message HwTest {
    // Name of the test suite to run.
    string suite = 1;
    // The key that identifies a distinct type of device in Skylab.
    // Skylab uses the term "board", hence use of this otherwise controversial
    // word.
    // e.g. could use device_target 'caroline' to test the build_target
    // 'caroline-arcnext'.
    string skylab_board = 11;
    // Number of seconds to wait before timing out waiting for results.
    int32 timeout_sec = 2;
    // Failure on HW tests warns only (does not generate error).
    bool warn_only = 3;
    // Usually we consider structural failures here as OK.
    bool critical = 4;
    // Should we file bugs if a test fails in a suite run.
    bool file_bugs = 5;
    // Minimum number of DUTs required for testing in the hw lab.
    int32 minimum_duts = 6;
    // Whether we should retry tests that fail in a suite run.
    bool retry = 7;
    // Maximum job retries allowed at suite level. 0 for no max.
    int32 max_retries = 8;
    // Preferred minimum duts. Lab will prioritize on getting such
    // number of duts even if the suite is competing with
    // other suites that have higher priority.
    int32 suite_min_duts = 9;
    // Only offload failed tests to Google Storage.
    bool offload_failures_only = 10;
    // TODO(crbug.com/923001): Do we need suite_args here? Possibly not, since
    // they only seem to be used for the hardware provisioning step.
    // https://cs.chromium.org/chromium/src/third_party/chromite/lib/config_lib.py?l=512-514&rcl=aea01e37674869d75cf26c8a826195b4dd6a890b
  }

  repeated HwTest hw_test = 1;
}

message MoblabVmTestCfg {
  message MoblabTest {
    // Test type to be run.
    string test_type = 1;
    // Number of seconds to wait before timing out waiting for results.
    int32 timeout_sec = 2;
  }

  repeated MoblabTest moblab_test = 1;
}

message TastVmTestCfg {
  message TastTestExpr {
    // A single tast test expression. See https://goo.gl/UPNEgT
    string test_expr = 1;
  }
  message TastVmTest {
    // String containing short human-readable name describing test suite.
    string suite_name = 1;
    // List of string expressions describing which tests to run; this
    // is passed directly to the 'tast run' command. See
    // https://goo.gl/UPNEgT for info about test expressions.
    repeated TastTestExpr tast_test_expr = 2;
    // Number of seconds to wait before timing out waiting for results.
    int32 timeout_sec = 3;
  }

  repeated TastVmTest tast_vm_test = 1;
}

message VmTestCfg {
  message VmTest {
    // Test type to be run.
    string test_type = 1;
    // Test suite to be run in VMTest.
    string test_suite = 2;
    // Number of seconds to wait before timing out waiting for results.
    int32 timeout_sec = 3;
    // Whether we should retry tests that fail in a suite run.
    bool retry = 4;
    // Maximum job retries allowed at suite level. 0 for no max.
    int32 max_retries = 5;
    // Failure on VM tests warns only.
    bool warn_only = 6;
    // Use the old ctest code path rather than the new chromite one.
    bool use_ctest = 7;
  }

  repeated VmTest vm_test = 1;
}


// Specifies a CrOS builder to target.
message TargetCriteria {
  oneof target_type {
    // Any CrOS build target, such as "kevin". This should correspond to a
    // Portage overlay.
    string build_target = 2;
  }
}

// Details which testing is needed for a single CrOS build target.
message PerTargetTestRequirements {
  // Specifies the crieria for builds to target for testing.
  TargetCriteria target_criteria = 1;

  // These configure what testing is needed for these BuildCriteria.
  GceTestCfg gce_test_cfg = 2;
  HwTestCfg hw_test_cfg = 3;
  MoblabVmTestCfg moblab_vm_test_cfg = 4;
  TastVmTestCfg tast_vm_test_cfg = 6;
  VmTestCfg vm_test_cfg = 5;
}

// A listing of all testing that should be done for all CrOS builds.
message TargetTestRequirementsCfg {
  // The testing that should be performed for a single set of target criteria.
  repeated PerTargetTestRequirements per_target_test_requirements = 1;
}

