// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package testplans;

option go_package = "go.chromium.org/chromiumos/infra/proto/go/testplans";

import "testplans/target_test_requirements_config.proto";

message FilePath {
  string file_path = 1;
}

message GenerateTestPlanRequest {
  // Path on disk to source_tree_test_config.cfg, which lives in chromite.
  string source_tree_config_path = 1;

  // Path on disk to target_test_requirements.cfg, which lives in chromite.
  string target_test_requirements_path = 2;

  // Path on disk to the buildbucket Build protos in protobuf JSON format.
  // See https://chromium.googlesource.com/infra/luci/luci-go/+/master/buildbucket/proto/build.proto
  repeated FilePath buildbucket_build_path = 3;
}

// The final test plan.
message GenerateTestPlanResponse {
  repeated TestUnit test_unit = 1;
}

// A Chromium build image, such as "kevin".
message Image {
  // The build image's name.
  string image_name = 1;
}

// The files that should be tested in a test plan.
message BuildPayload {
  // We expect to use either version or images, but not both.
  // We'll drop the unnecessary one once we've sorted out details
  // with the Skylab team.
  string version = 1;
  repeated Image image = 2;
  // The location in Google Storage of the artifacts for this build.
  // e.g. gs://chromeos-image-archive/eve-paladin/R73-11588.0.0-rc4
  string artifact_path = 3;
}

// Hardware or VM requirements for running a test plan.
message SchedulingRequirements {
  oneof target_type {
    // Any CrOS build target, such as "kevin". This should correspond to a
    // Portage overlay.
    string build_target = 2;
  }
}

// Metadata for executing one test configuration for one target type.
message TestUnit {
  oneof TestCfg {
    GceTestCfg gce_test_cfg = 1;
    HwTestCfg hw_test_cfg = 2;
    MoblabVmTestCfg moblab_vm_test_cfg = 3;
    TastVmTestCfg tast_vm_test_cfg = 4;
    VmTestCfg vm_test_cfg = 5;
  }

  // The scheduling requirements for this test plan.
  SchedulingRequirements scheduling_requirements = 6;
  // The build files provided to run this test plan.
  BuildPayload build_payload = 7;
}
